(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
	typeof define === 'function' && define.amd ? define(factory) :
	(global.coreDatepicker = factory());
}(this, (function () { 'use strict';

var IS_ANDROID = typeof window !== 'undefined' && /(android)/i.test(window.navigator.userAgent); // Bad, but needed
var FOCUSABLE = 'a,button,input,select,textarea,iframe,[tabindex],[contenteditable="true"]';

/**
* assign
* @param {Object} target The target object
* @param {Object} sources The source object(s)
* @return {Object} The target object
*/


/**
* addEvent
* @param {String} uuid An unique ID of the event to bind - ensurnes single instance
* @param {String} type The type of event to bind
* @param {Function} handler The function to call on event
*/






/**
* CustomEvent
* See {@link https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent}
* @param {String} eventName A case-sensitive string representing the event type to create
* @param {Object} params.detail Any data passed when initializing the event
* @param {Boolean} params.cancelable A Boolean indicating whether the event is cancelable.
* @param {Boolean} params.bubbles A Boolean indicating whether the event bubbles up through the DOM or not.
* @return {CustomEvent} Creates a CustomEvent.
*/
var CustomEvent = (function () {
  if (typeof window === 'undefined') { return }
  if (typeof window.CustomEvent === 'function') { return window.CustomEvent }

  function CustomEvent (name, params) {
    if ( params === void 0 ) params = {};

    var event = document.createEvent('CustomEvent');
    event.initCustomEvent(name, Boolean(params.bubbles), Boolean(params.cancelable), params.detail);
    return event
  }

  CustomEvent.prototype = window.Event.prototype;
  return CustomEvent
})();

/**
* debounce
* @param {Function} callback The function to debounce
* @param {Number} ms The number of milliseconds to delay
* @return {Function} The new debounced function
*/


/**
* dispatchEvent
* @param {Element} elem The target object
* @param {String} name The source object(s)
* @param {Object} detail Detail object (bubbles and cancelable defaults to true)
* @return {Boolean} Whether the event was cance
*/


/**
* getUUID
* @return {String} A generated unique ID
*/


/**
* isVisible
* @param {Element} el A element to check visibility on
* @return {Boolean} True of false based on visibility
*/
function isVisible (el) {
  return el.offsetWidth && el.offsetHeight && window.getComputedStyle(el).getPropertyValue('visibility') !== 'hidden'
}

/**
* queryAll
* @param {String|NodeList|Array|Element} elements A CSS selector string, nodeList, element array, or single element
* @return {Array} Array of elements
*/
function queryAll (elements, context) {
  if ( context === void 0 ) context = document;

  if (elements === ':focusable') { return queryAll(FOCUSABLE, context).filter(function (el) { return !el.disabled && isVisible(el); }) }
  if (typeof elements === 'string') { return queryAll(context.querySelectorAll(elements)) }
  if (elements.length) { return [].slice.call(elements) }
  return elements.nodeType ? [elements] : []
}

if(typeof window !=="undefined" && typeof window.CustomEvent !== "function") {

	function CustomEvent$1 ( event, params ) {
    	if ( params === void 0 ) params = { bubbles: false, cancelable: false, detail: undefined };

    	var evt = document.createEvent( 'CustomEvent' );
    	evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );
    	return evt;
	}

	CustomEvent$1.prototype = window.Event.prototype;

	window.CustomEvent = CustomEvent$1;

	

}

// import {name, version} from './package.json'
var KEY = 'core-datepicker'; //`${name}-${version}`                    // Unique id of component

function datepicker () {
  var args = [], len = arguments.length;
  while ( len-- ) args[ len ] = arguments[ len ];
              // Expose component
  return new (Function.prototype.bind.apply( Datepicker, [ null ].concat( args) ))
}

var Datepicker = function Datepicker (elements) {
  this.elements = queryAll(elements, KEY);
  // tabindex="0" på datepicker kun lytte til events på disse
};
Datepicker.prototype.open = function open (open) {
    if ( open === void 0 ) open = true;
};
Datepicker.prototype.close = function close (open) {
    if ( open === void 0 ) open = false;
};


/* <table>
  <caption></caption>
  <thead></thead>
  <tbody></tbody>
  <tfoot></tfoot>
</table> */

return datepicker;

})));
//# sourceMappingURL=core-datepicker.min.js.map
